# Set default path
SRC_PATH ?= $(PWD)
BLD_PATH ?= $(SRC_PATH)/../build
DEPLOYDIR ?= $(SRC_PATH)/../deploy

BL32_DEPLOYDIR     ?= $(DEPLOYDIR)/bl32
FWCONFIG_DEPLOYDIR ?= $(DEPLOYDIR)/fwconfig

# Configure default TF-A features
TF_A_ENABLE_DEBUG_WRAPPER ?= 0

# Set default TF-A config
TF_A_CONFIG ?=  optee emmc sdcard usb

# Default TF-A overall settings to null
TF_A_BINARY ?=
TF_A_DEVICETREE ?=
TF_A_MAKE_TARGET ?=
TF_A_EXTRA_OPTFLAGS ?=

# Default TF-A metadata template
TF_A_METADATA_JSON ?= $(SRC_PATH)/plat/st/stm32mp1/default_metadata.json

# Init default config settings
TF_A_DEVICETREE_optee ?= stm32mp135d-atk
TF_A_EXTRA_OPTFLAGS_optee ?= AARCH32_SP=optee
TF_A_BINARY_optee ?= tf-a
TF_A_MAKE_TARGET_optee ?= dtbs

# Init default config settings
#TF_A_DEVICETREE_trusted ?= stm32mp157a-dk1 stm32mp157d-dk1 stm32mp157c-dk2 stm32mp157f-dk2 stm32mp157c-ed1 stm32mp157f-ed1 stm32mp157a-ev1 stm32mp157c-ev1 stm32mp157d-ev1 stm32mp157f-ev1
#TF_A_EXTRA_OPTFLAGS_trusted ?= AARCH32_SP=sp_min
#TF_A_BINARY_trusted ?= tf-a
#TF_A_MAKE_TARGET_trusted ?= bl32 dtbs

# Init default config settings
TF_A_DEVICETREE_emmc ?=  stm32mp135d-atk
TF_A_EXTRA_OPTFLAGS_emmc ?= STM32MP_EMMC=1 PSA_FWU_SUPPORT=1
TF_A_BINARY_emmc ?= tf-a
TF_A_MAKE_TARGET_emmc ?= all

# Init default config settings
#TF_A_DEVICETREE_nand ?=  stm32mp157a-ev1 stm32mp157c-ev1 stm32mp157d-ev1 stm32mp157f-ev1
#TF_A_EXTRA_OPTFLAGS_nand ?= STM32MP_RAW_NAND=1 STM32MP_FORCE_MTD_START_OFFSET=0x00200000
#TF_A_BINARY_nand ?= tf-a
#TF_A_MAKE_TARGET_nand ?= all

# Init default config settings
#TF_A_DEVICETREE_nor ?=  stm32mp157a-ev1 stm32mp157c-ev1 stm32mp157d-ev1 stm32mp157f-ev1
#TF_A_EXTRA_OPTFLAGS_nor ?= STM32MP_SPI_NOR=1 PSA_FWU_SUPPORT=1 STM32MP_FORCE_MTD_START_OFFSET=0x00080000
#TF_A_BINARY_nor ?= tf-a
#TF_A_MAKE_TARGET_nor ?= all

# Init default config settings
TF_A_DEVICETREE_sdcard ?=  stm32mp135d-atk
TF_A_EXTRA_OPTFLAGS_sdcard ?= STM32MP_SDMMC=1 PSA_FWU_SUPPORT=1
TF_A_BINARY_sdcard ?= tf-a
TF_A_MAKE_TARGET_sdcard ?= all

# Init default config settings
TF_A_DEVICETREE_uart ?=  stm32mp135d-atk 
TF_A_EXTRA_OPTFLAGS_uart ?= STM32MP_UART_PROGRAMMER=1
TF_A_BINARY_uart ?= tf-a
TF_A_MAKE_TARGET_uart ?= all

# Init default config settings
TF_A_DEVICETREE_usb ?=  stm32mp135d-atk
TF_A_EXTRA_OPTFLAGS_usb ?= STM32MP_USB_PROGRAMMER=1
TF_A_BINARY_usb ?= tf-a
TF_A_MAKE_TARGET_usb ?= all


# Reset default variables
LDFLAGS =
CFLAGS =
CPPFLAGS =
CC =
CPP =
AS =
AR =
LD =
NM =
# Define default make options
EXTRA_OEMAKE ?=  PLAT=stm32mp1 ARCH=aarch32 ARM_ARCH_MAJOR=7 CROSS_COMPILE=arm-none-linux-gnueabihf- DEBUG=1 LOG_LEVEL=40   

# Display TF-A config details
define tf-configs
	echo "  $(1)" ; \
	echo "    with device tree : $(if $(TF_A_DEVICETREE),$(TF_A_DEVICETREE),$(TF_A_DEVICETREE_$(1)))" ; \
	echo "    extra optionflags: $(if $(TF_A_EXTRA_OPTFLAGS),$(TF_A_EXTRA_OPTFLAGS),$(TF_A_EXTRA_OPTFLAGS_$(1)))" ; \
	echo "    binary basename  : $(if $(TF_A_BINARY),$(TF_A_BINARY),$(TF_A_BINARY_$(1)) (TF_A_BINARY_$(1)))" ; \
	echo "    tf-a build target: $(if $(TF_A_MAKE_TARGET),$(TF_A_MAKE_TARGET),$(TF_A_MAKE_TARGET_$(1)))" ;
endef

# Configure TF-A make rules
define tf-rules
tf-$(1): $2
	@mkdir -p $(BLD_PATH)/$(1)
	@$(foreach dt, $(if $(TF_A_DEVICETREE),$(TF_A_DEVICETREE),$(TF_A_DEVICETREE_$(1))), \
		$(MAKE) $(EXTRA_OEMAKE) -C $(SRC_PATH) \
			BUILD_PLAT=$(BLD_PATH)/$(1) \
			DTB_FILE_NAME=$(dt).dtb \
			$(if $(TF_A_EXTRA_OPTFLAGS),$(TF_A_EXTRA_OPTFLAGS),$(TF_A_EXTRA_OPTFLAGS_$(1))) \
			$(if $(TF_A_MAKE_TARGET),$(TF_A_MAKE_TARGET),$(TF_A_MAKE_TARGET_$(1))) \
			$(foreach soc, stm32mp15  stm32mp13 ,$(if $(findstring $(soc),$(dt)),$(shell echo $(soc) | tr a-z A-Z)=1,)) ; \
	)
endef

# Configure TF-A deploy rules
define deploy-rules
deploy-$(1): tf-$(1)
	@mkdir -p $(DEPLOYDIR)
	@mkdir -p $(DEPLOYDIR)/debug
	@$(foreach dt, $(if $(TF_A_DEVICETREE),$(TF_A_DEVICETREE),$(TF_A_DEVICETREE_$(1))), \
		if [ -f $(BLD_PATH)/$(1)/$(2)-$(dt).stm32 ]; then \
			cp -f $(BLD_PATH)/$(1)/$(2)-$(dt).stm32 $(DEPLOYDIR)/$(2)-$(dt)-$(1).stm32 ; \
			if [ "$(TF_A_ENABLE_DEBUG_WRAPPER)" = "1" ] ; then \
				stm32wrapper4dbg -s $(BLD_PATH)/$(1)/$(2)-$(dt).stm32 -d $(DEPLOYDIR)/debug/debug-$(2)-$(dt)-$(1).stm32 ; \
			fi ; \
		fi ; \
		if [ -f $(BLD_PATH)/$(1)/bl32.bin ] ; then \
			mkdir -p $(BL32_DEPLOYDIR) ; \
			cp -f $(BLD_PATH)/$(1)/bl32.bin $(BL32_DEPLOYDIR)/$(2)-bl32$(strip $(foreach soc, stm32mp15  stm32mp13 ,$(if $(findstring $(soc),$(dt)),-$(soc),))).bin ; \
			if [ -f $(BLD_PATH)/$(1)/fdts/$(dt)-bl32.dtb ]; then \
				cp -f $(BLD_PATH)/$(1)/fdts/$(dt)-bl32.dtb $(BL32_DEPLOYDIR)/ ; \
			fi ; \
			if [ -f $(BLD_PATH)/$(1)/bl32/bl32.elf ]; then \
				mkdir -p $(BL32_DEPLOYDIR)/debug ; \
				mv -f $(BLD_PATH)/$(1)/bl32/bl32.elf $(BL32_DEPLOYDIR)/debug/$(2)-bl32$(strip $(foreach soc, stm32mp15  stm32mp13 ,$(if $(findstring $(soc),$(dt)),-$(soc),))).elf ; \
			fi ; \
		fi ; \
		if [ -f $(BLD_PATH)/$(1)/fdts/$(dt)-fw-config.dtb ]; then \
			mkdir -p $(FWCONFIG_DEPLOYDIR) ; \
			cp -f $(BLD_PATH)/$(1)/fdts/$(dt)-fw-config.dtb $(FWCONFIG_DEPLOYDIR)/$(dt)-fw-config-$(1).dtb ; \
		fi ; \
		if [ -f $(BLD_PATH)/$(1)/bl2/bl2.elf ] ; then \
			cp -f $(BLD_PATH)/$(1)/bl2/bl2.elf $(DEPLOYDIR)/debug/$(2)-bl2-$(1).elf ; \
		fi ; \
		if [ -f $(BLD_PATH)/$(1)/bl32/bl32.elf ] ; then \
			cp -f $(BLD_PATH)/$(1)/bl32/bl32.elf $(DEPLOYDIR)/debug/$(2)-bl32-$(1).elf ; \
		fi ; \
	)
endef

# Set dependencies list for building all
DEPS = $(addprefix deploy-,$(TF_A_CONFIG))
#DEPS += fip
DEPS += metadata

help:
	@echo
	@echo "TF-A configuration:"
	@echo "  TF_A_CONFIG = $(TF_A_CONFIG)"
	@echo "Config details:"
	@$(foreach config, $(TF_A_CONFIG), $(call tf-configs,$(config)))
	@echo
	@echo "Note that each TF-A configuration settings can be updated through overall or specific config var:"
	@echo "  TF_A_DEVICETREE"
	@echo "  TF_A_EXTRA_OPTFLAGS"
	@echo "  TF_A_BINARY"
	@echo "  TF_A_MAKE_TARGET"
	@echo
	@echo "TF-A features configuration:"
	@echo "  TF_A_ENABLE_DEBUG_WRAPPER = $(TF_A_ENABLE_DEBUG_WRAPPER) ('1' to generate tf-a for debugging)"
	@echo
	@echo "TF-A folder configuration:"
	@echo "  SRC_PATH  = $(SRC_PATH)"
	@echo "  BLD_PATH  = $(BLD_PATH)"
	@echo "  DEPLOYDIR = $(DEPLOYDIR)"
	@echo "  BL32_DEPLOYDIR     = $(DEPLOYDIR)/bl32"
	@echo "  FWCONFIG_DEPLOYDIR = $(DEPLOYDIR)/fwconfig"
	@echo
	@echo "FIP configuration:"
	@echo "  Do not forget to set FIP deploydir folders (such as FIP_DEPLOYDIR_ROOT) to provide path to needed binaries"
	@echo
	@echo "METADATA configuration:"
	@echo "  TF_A_METADATA_JSON = $(TF_A_METADATA_JSON)"
	@echo
	@echo "Available targets:"
	@echo "  all      : build TF-A binaries for defined config(s)"
	@echo "  fip      : build FIP binaries"
	@echo "  metadata : build the TF-A metadata binary"
	@echo "  stm32    : build TF-A stm32 binaries"
	@echo "  clean    : clean build directories from generated files"
	@echo

all: $(DEPS)

host_tools:
	@$(MAKE) --no-print-directory -C $(SRC_PATH)/tools/stm32image

# Set TF-A make rules
$(foreach config, $(TF_A_CONFIG), $(eval $(call tf-rules,$(config),host_tools)))

# Set TF-A deploy rules
$(foreach config, $(TF_A_CONFIG), $(eval $(call deploy-rules,$(config),$(if $(TF_A_BINARY),$(TF_A_BINARY),$(TF_A_BINARY_$(config))))))

fip: $(addprefix deploy-,$(TF_A_CONFIG))
	for config in $(TF_A_CONFIG) ; do \
		if [ "$$config" = "trusted" ]; then \
			FIP_DEPLOYDIR_TFA=$(BL32_DEPLOYDIR) FIP_DEPLOYDIR_FWCONF=$(FWCONFIG_DEPLOYDIR) FIP_DEVICETREE="$(if $(TF_A_DEVICETREE),$(TF_A_DEVICETREE),$(TF_A_DEVICETREE_trusted))" FIP_CONFIG="trusted" FIP_BL32_CONF="tfa" fiptool-stm32mp ; \
		fi ; \
		if [ "$$config" = "optee" ]; then \
			FIP_DEPLOYDIR_TFA=$(BL32_DEPLOYDIR) FIP_DEPLOYDIR_FWCONF=$(FWCONFIG_DEPLOYDIR) FIP_DEVICETREE="$(if $(TF_A_DEVICETREE),$(TF_A_DEVICETREE),$(TF_A_DEVICETREE_optee))" FIP_CONFIG="optee" FIP_BL32_CONF="optee" fiptool-stm32mp ; \
		fi ; \
	done

stm32: $(addprefix deploy-,$(TF_A_CONFIG))

metadata:
	@mkdir -p $(DEPLOYDIR)
	$(SRC_PATH)/tools/fwu_gen_metadata/fwumd_tool.py jsonparse "$(TF_A_METADATA_JSON)" -b $(DEPLOYDIR)/metadata.bin

clean:
	@for config in $(TF_A_CONFIG) ; do \
		echo "Removing $(BLD_PATH)/$$config ..." ; \
		rm -rf $(BLD_PATH)/$$config ; \
	done
	@echo "Removing $(DEPLOYDIR) ..."
	@rm -rf $(DEPLOYDIR)
	@echo
